{"version":3,"sources":["ColorCubeTHREE.js","QuestionArea.js","ChromapperActions.js","SolutionSpacePointCloud.js","App.js","serviceWorker.js","index.js"],"names":["OrbitControls","require","ColorCube","start","_this","frameId","requestAnimationFrame","animate","update","x","y","z","undefined","pi","Math","PI","xi","group","rotation","dx","yi","dy","zi","dz","trans","d3","t","stop","console","log","yline","geometry","vertices","dxy_slope","xline","dxyi","dxy","n","dxz_slope","dxzi","dxz","dyx_slope","dyxi","dyx","dyz_slope","dyzi","dyz","dzx_slope","zline","dzxi","dzx","dzy_slope","dzyi","dzy","i","trans2","verticesNeedUpdate","cancelAnimationFrame","renderScene","window","renderer","render","scene","camera","width","this","mount","clientWidth","height","clientHeight","THREE","position","controls","enablePan","maxZoom","minZoom","antialias","alpha","setClearColor","setSize","appendChild","domElement","color","face","numberOfSides","vertexIndex","point","cubeGeometry","cubeMaterial","vertexColors","faceIndices","faces","length","j","setRGB","cubeSize","xline_geometry","push","xline_material","yline_geometry","yline_material","zline_geometry","zline_material","cube","add","removeChild","_this2","react_default","a","createElement","style","ref","Component","QuestionArea","props","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","buttonVisibility","submitAnswer","refs","toggle","yes","visibility","no","toggleMode","onClick","d","disabled","borderRadius","backgroundColor","textAlign","textDecoration","fontSize","border","padding","display","-webkit-appearance","-moz-appearance","appearance","opacity","margin","postData","data","callbackfn","input","method","cache","headers","Content-Type","body","JSON","stringify","fetch","then","response","json","newQuestion","SolutionSpacePointCloud","updatePoints","points","needsNewGeometry","MAX_POINTS","createNewGeometry","cloud","count","forEach","rgb","conf","rating","reduce","c","ratings","xyz","attributes","array","setDrawRange","needsUpdate","material","mesh","geo","addAttribute","mat","linewidth","wireframe","alphas","Float32Array","colors","positions","r","g","b","shaderMaterial","vertexShader","fragmentShader","transparent","name","remove","getObjectByName","_this3","App","getQuestion","newPoint","changeColor","transition","center","current","submitResult","result","assertThisInitialized","SolutionSpace","React","createRef","viewMode","setState","newPoints","className","ColorCubeTHREE","src_SolutionSpacePointCloud","src_QuestionArea","toggleViewMode","bind","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.40bc63b5.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport * as d3 from 'd3'; \r\nimport * as THREE from 'three';\r\nimport './ColorCube.css';\r\n\r\n//import RendererStats from 'three-webgl-stats';\r\n\r\nconst OrbitControls = require('three-orbitcontrols');\r\n\r\n\r\n\r\nclass ColorCube extends Component {\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tconst width = this.mount.clientWidth\r\n\t\tconst height = this.mount.clientHeight\r\n\t\t//ADD SCENE\r\n\t\tthis.scene = new THREE.Scene();\r\n\t\t//ADD CAMERA\r\n\t\tthis.camera = new THREE.PerspectiveCamera(\r\n\t\t  75*255,\r\n\t\t  width / height,\r\n\t\t  0.1*255,\r\n\t\t  1000*255\r\n\t\t);\r\n\r\n\r\n\t\tthis.camera.position.z = 4*255\r\n\r\n\t\tthis.controls = new OrbitControls( this.camera );\r\n\r\n\t\tthis.controls.enablePan = false;\r\n\t\tthis.controls.maxZoom = 1.5;\r\n\t\tthis.controls.minZoom = 0.4;\r\n\t\t//this.controls.e\r\n\r\n\t\t//ADD RENDERER\r\n\t\tthis.renderer = new THREE.WebGLRenderer({ antialias: true , alpha: true })\r\n\t\tthis.renderer.setClearColor(0x000000, 0)\r\n\t\tthis.renderer.setSize(width, height)\r\n\t\tthis.mount.appendChild(this.renderer.domElement)\r\n\t\t//ADD CUBE\r\n\r\n\t\tvar cubeSize = 256;\r\n\r\n\t\tconst cubeGeometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize)\r\n\r\n\t\tvar cubeMaterial = new THREE.MeshBasicMaterial( { color: 0xffffff, vertexColors: THREE.VertexColors } );\r\n\t\t\r\n\t\tvar color, face, numberOfSides, vertexIndex;\r\n\t\t\r\n\t\t// faces are indexed using characters\r\n\t\tvar faceIndices = [ 'a', 'b', 'c', 'd', 'e', 'f' ];\r\n\t\t\t\t\r\n\t\t// RGB color cube\r\n\t\t//var size = 256;\r\n\t\tvar point;\r\n\t\tfor ( var i = 0; i < cubeGeometry.faces.length; i++ ) \r\n\t\t{\r\n\t\t\tface = cubeGeometry.faces[ i ];\r\n\t\t\t// determine if current face is a tri or a quad\r\n\t\t\tnumberOfSides = ( face instanceof THREE.Face3 ) ? 3 : 4;\r\n\t\t\t// assign color to each vertex of current face\r\n\t\t\tfor( var j = 0; j < numberOfSides; j++ ) \r\n\t\t\t{\r\n\t\t\t\tvertexIndex = face[ faceIndices[ j ] ];\r\n\t\t\t\t// store coordinates of vertex\r\n\t\t\t\tpoint = cubeGeometry.vertices[ vertexIndex ];\r\n\t\t\t\t// initialize color variable\r\n\t\t\t\tcolor = new THREE.Color( 0xffffff );\r\n\t\t\t\tcolor.setRGB( (point.x + cubeSize/2)/cubeSize, (point.y + cubeSize/2)/cubeSize, (point.z + cubeSize/2)/cubeSize);\r\n\r\n\t\t\t\tface.vertexColors[ j ] = color;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst ext = cubeSize*1.5; // the extent of our guide lines\r\n\r\n\t\tvar xline_geometry = new THREE.Geometry();\r\n\t\txline_geometry.vertices.push(new THREE.Vector3( ext, 0, 0),\r\n\t\t\t\t\t\t\t\t\t new THREE.Vector3( -ext, 0, 0));\r\n\t\tvar xline_material = new THREE.LineBasicMaterial( {color:0xff0000} );\r\n\r\n\t\tthis.xline = new THREE.Line(xline_geometry, xline_material)\r\n\r\n\t\tvar yline_geometry = new THREE.Geometry();\r\n\t\tyline_geometry.vertices.push(new THREE.Vector3( 0, ext,  0),\r\n\t\t\t\t\t\t\t\t\t new THREE.Vector3( 0, -ext, 0));\r\n\t\tvar yline_material = new THREE.LineBasicMaterial( {color:0x00ff00} );\r\n\r\n\t\tthis.yline = new THREE.Line(yline_geometry, yline_material)\r\n\r\n\t\tvar zline_geometry = new THREE.Geometry();\r\n\t\tzline_geometry.vertices.push(new THREE.Vector3( 0, 0, ext),\r\n\t\t\t\t\t\t\t\t\t new THREE.Vector3( 0, 0, -ext));\r\n\t\tvar zline_material = new THREE.LineBasicMaterial( {color:0x0000ff} );\r\n\r\n\t\tthis.zline = new THREE.Line(zline_geometry, zline_material)\r\n\t\t\r\n\r\n\t\t/*\r\n\t\tthis.light = new THREE.PointLight(0xffffff);\r\n\t\tthis.light.position.set(0,500,0);\r\n\t\tthis.scene.add(this.light);\r\n\t\t*/\r\n\t\tthis.cube = new THREE.Mesh( cubeGeometry, cubeMaterial );\r\n\t\tthis.group = new THREE.Group();\r\n\t\tthis.group.add( this.cube )\r\n\t\tthis.group.add( this.xline )\r\n\t\tthis.group.add( this.yline )\r\n\t\tthis.group.add( this.zline )\r\n\t\tthis.scene.add( this.group )\r\n\t\tthis.start()\r\n\r\n\t\t//console.log(THREE)\r\n\t\t//console.log(this.cube);\r\n\t}\r\n\r\n\tcomponentWillUnmount(){\r\n\t\tthis.stop()\r\n\t\tthis.mount.removeChild(this.renderer.domElement)\r\n\t}\r\n\r\n\tstart = () => {\r\n\t\tif (!this.frameId) {\r\n\t\t\tthis.frameId = requestAnimationFrame(this.animate)\r\n\t\t}\r\n\t}\r\n\r\n\tupdate = (x, y, z) => {\r\n\t\tif(x === undefined){return;}\r\n/*\r\n\t\td3.select(this.mount)\r\n\t\t\t.on(\"mousedown\", ()=>{\r\n\t\t\t\tconst pi = Math.PI;\r\n\t\t\t\tconst transtime = 1000;\r\n\r\n\t\t\t\tconst xi = this.group.rotation.x;\r\n\t\t\t\tconst xf = xi + 5*pi/4\r\n\t\t\t\tconst dx = (xf - xi)/transtime\r\n\r\n\t\t\t\tconst yi = this.group.rotation.y;\r\n\t\t\t\tconst yf = yi + -pi / 4;\r\n\t\t\t\tconst dy = (yf - yi)/transtime\r\n\r\n\t\t\t\tconst zi = this.group.rotation.z;\r\n\t\t\t\tconst zf = zi + 0\r\n\t\t\t\tconst dz = (zf - zi)/transtime\r\n\r\n\t\t\t\tvar trans = d3.timer((t)=>{\r\n\t\t\t\t\tthis.group.rotation.x = dx * t\r\n\t\t\t\t\tthis.group.rotation.y = dy * t\r\n\t\t\t\t\tthis.group.rotation.z = dz * t\r\n\t\t\t\t\tif(t > transtime){trans.stop();}\r\n\t\t\t\t})\r\n\t\t\t})\r\n*/\r\n\t\tx -= 128;\r\n\t\ty -= 128;\r\n\t\tz -= 128;\r\n\r\n\t\tconst pi = Math.PI;\r\n\t\tconst transtime = 6000;\r\n\r\n\t\tconst xi = this.group.rotation.x;\r\n\t\tconst xf = xi + pi * 2// * Math.random()\r\n\t\tconst dx = (xf - xi)/transtime\r\n\r\n\t\tconst yi = this.group.rotation.y;\r\n\t\tconst yf = yi + pi * 2// * Math.random()\r\n\t\tconst dy = (yf - yi)/transtime\r\n\r\n\t\tconst zi = this.group.rotation.z;\r\n\t\tconst zf = zi + pi * 2// * Math.random()\r\n\t\tconst dz = (zf - zi)/transtime\r\n\r\n\t\tvar trans = d3.timer((t)=>{ // slightly speed up the cube's rotation for the next 10 seconds. Makes this a bit more fun, and encourages users to keep going\r\n\t\t\tthis.group.rotation.x += dx\r\n\t\t\tthis.group.rotation.y += dy\r\n\t\t\tthis.group.rotation.z += dz\r\n\t\t\tif(t > transtime){trans.stop();}\r\n\t\t})\r\n\r\n\t\tconst movetime = 400;\r\n\t\tconst steps = 30;\r\n\r\n\t\tconsole.log(this.yline.geometry.vertices[0])\r\n\r\n\t\tconst dxy_slope = (y - this.xline.geometry.vertices[0].y)/steps\r\n\t\tconst dxyi = this.xline.geometry.vertices[0].y;\r\n\t\tconst dxy = (n) => {return (dxy_slope * n) + dxyi};\r\n\r\n\t\tconst dxz_slope = (z - this.xline.geometry.vertices[0].z)/steps\r\n\t\tconst dxzi = this.xline.geometry.vertices[0].z;\r\n\t\tconst dxz = (n) => {return (dxz_slope * n) + dxzi};\r\n\r\n\r\n\t\tconst dyx_slope = (x - this.yline.geometry.vertices[0].x)/steps\r\n\t\tconst dyxi = this.yline.geometry.vertices[0].x;\r\n\t\tconst dyx = (n) => {return (dyx_slope * n) + dyxi};\r\n\r\n\t\tconst dyz_slope = (z - this.yline.geometry.vertices[0].z)/steps\r\n\t\tconst dyzi = this.yline.geometry.vertices[0].z;\r\n\t\tconst dyz = (n) => {return (dyz_slope * n) + dyzi};\r\n\r\n\r\n\t\tconst dzx_slope = (x - this.zline.geometry.vertices[0].x)/steps\r\n\t\tconst dzxi = this.zline.geometry.vertices[0].x;\r\n\t\tconst dzx = (n) => {return (dzx_slope * n) + dzxi};\r\n\r\n\t\tconst dzy_slope = (y - this.zline.geometry.vertices[0].y)/steps\r\n\t\tconst dzyi = this.zline.geometry.vertices[0].y;\r\n\t\tconst dzy = (n) => {return (dzy_slope * n) + dzyi};\r\n\r\n\r\n\t\t//const d$1 = $ - this.$line.geometry.vertices[1].$\r\n\t\tvar i = 0\r\n\t\tconsole.log(this.xline)\r\n\t\tvar trans2 = d3.interval((t)=>{ // slightly speed up the cube's rotation for the next 10 seconds. Makes this a bit more fun, and encourages users to keep going\r\n\t\t\ti++;\r\n\t\t\tthis.xline.geometry.vertices[0].y = (dxy(i));\r\n\t\t\tthis.xline.geometry.vertices[0].z = (dxz(i));\r\n\t\t\t\r\n\t\t\tthis.xline.geometry.vertices[1].y = (dxy(i));\r\n\t\t\tthis.xline.geometry.vertices[1].z = (dxz(i));\r\n\r\n\t\t\tthis.yline.geometry.vertices[0].x = (dyx(i));\r\n\t\t\tthis.yline.geometry.vertices[0].z = (dyz(i));\r\n\t\t\t\r\n\t\t\tthis.yline.geometry.vertices[1].x = (dyx(i));\r\n\t\t\tthis.yline.geometry.vertices[1].z = (dyz(i));\r\n\r\n\t\t\tthis.zline.geometry.vertices[0].x = (dzx(i));\r\n\t\t\tthis.zline.geometry.vertices[0].y = (dzy(i));\r\n\t\t\t\r\n\t\t\tthis.zline.geometry.vertices[1].x = (dzx(i));\r\n\t\t\tthis.zline.geometry.vertices[1].y = (dzy(i));\r\n\t\t\t\r\n\t\t\tthis.xline.geometry.verticesNeedUpdate = true;\r\n\t\t\tthis.yline.geometry.verticesNeedUpdate = true;\r\n\t\t\tthis.zline.geometry.verticesNeedUpdate = true;\r\n\t\t\t\t\r\n\t\t\tif(t > movetime){trans2.stop();}\r\n\t\t}, movetime/steps)\r\n\r\n\t}\r\n\t\r\n\tstop = () => {\r\n\t\tcancelAnimationFrame(this.frameId)\r\n\t}\r\n\t\r\n\tanimate = () => {\r\n\t\t//*\r\n\t\tthis.group.rotation.x += 0.001\r\n\t\tthis.group.rotation.y += 0.001\r\n\t\tthis.group.rotation.z += 0.001\r\n\t\t/**/\r\n\t\tthis.renderScene()\r\n\t\tthis.frameId = window.requestAnimationFrame(this.animate)\r\n\t}\r\n\t\r\n\trenderScene = () => {\r\n\t\tthis.renderer.render(this.scene, this.camera)\r\n\t}\r\n\r\n\trender(){\r\n\r\n\t\treturn(\r\n\t\t\t<div\r\n\t\t\t\tstyle={{ width: '500px', height: '500px' }}\r\n\t\t\t\tref={(mount) => { this.mount = mount }}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default ColorCube;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {Component} from \"react\";\r\nimport PropTypes from 'prop-types';\r\n//import * as d3 from \"d3\";\r\n\r\nclass QuestionArea extends Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t\tthis.buttonVisibility = 1\r\n\t\t}\r\n\r\n\r\n\tstatic propTypes = {submitAnswer: PropTypes.func.isRequired,\r\n\t\t\t\t\t\ttoggleMode: PropTypes.func.isRequired};\r\n\r\n\tcomponentWillMount(){/*update the graph after the component mounts (and the svg is created)*/\r\n\t\tthis.submitAnswer = this.props.submitAnswer;\r\n\t}\r\n\r\n\ttoggleMode(){\r\n\r\n\t\tif(this.buttonVisibility === 1){\r\n\t\t\tthis.buttonVisibility = 0;\r\n\t\t\tthis.refs.toggle.style.color = \"white\";\r\n\t\t\tthis.submitAnswer = ()=>{};\r\n\t\t} else {\r\n\t\t\tthis.buttonVisibility = 1;\r\n\t\t\tthis.refs.toggle.style.color = \"black\"\r\n\t\t\tthis.submitAnswer = this.props.submitAnswer;\r\n\t\t}\r\n\t\tthis.refs.yes.style.visibility =  this.buttonVisibility;\r\n\t\tthis.refs.no.style.visibility = this.buttonVisibility;\r\n\t\tthis.props.toggleMode();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div width=\"100%\">\r\n\t\t\t\t<button ref=\"yes\" onClick={d=>this.submitAnswer(1)} disabled={this.buttonVisibility ? \"\" : \"disabled\"} style={\r\n\t\t\t\t\t{//\"width\":'40%',\r\n\t\t\t\t\tx:'0%',\r\n\t\t\t\t\t//padding:'10px 24px',\r\n\t\t\t\t\tborderRadius:'10px',\r\n\t\t\t\t\tbackgroundColor: 'rgba(0,0,0,0)',\r\n\t\t\t\t\ttextAlign: 'center',\r\n\t\t\t\t\ttextDecoration: 'none',\r\n\t\t\t\t\tfontSize: '16px',\r\n\t\t\t\t\tborder: '2px solid #4CAF50',\r\n\t\t\t\t\tcolor: 'black',\r\n\t\t\t\t\tpadding: '15px 32px',\r\n\t\t\t\t\tdisplay: 'inline-block',\r\n\t\t\t\t\t\"-webkit-appearance\": 'none',\r\n\t\t\t\t\t\"-moz-appearance\": 'none',\r\n\t\t\t\t\tappearance: 'none',\r\n\t\t\t\t\topacity:this.buttonVisibility\r\n\t\t\t\t\t}\r\n\t\t\t\t}>Background IS Pastel</button>\r\n\t\t\t\t<button ref=\"toggle\" onClick={d=>this.toggleMode()} style={\r\n\t\t\t\t\t{//\"width\":'20%',\r\n\t\t\t\t\t x:'0%',\r\n\t\t\t\t\t backgroundColor: 'rgba(0,0,0,0)',\r\n\t\t\t\t\t textAlign:'center',\r\n\t\t\t\t\t textDecoration: 'none',\r\n\t\t\t\t\t fontSize: '16px',\r\n\t\t\t\t\t border: 'none',\r\n\t\t\t\t\t color: 'black',\r\n\t\t\t\t\t padding: '15px 32px',\r\n\t\t\t\t\t margin:'auto',\r\n\t\t\t\t\t display: 'inline-block',\r\n\t\t\t\t\t}\r\n\t\t\t\t}>{this.buttonVisibility === 'visible' ? 'View Results': 'Map Colors' }</button>\r\n\t\t\t\t<button ref=\"no\" onClick={d=>this.submitAnswer(0)} disabled={this.buttonVisibility ? \"\" : \"disabled\"} style={\r\n\t\t\t\t\t{//\"width\":'40%',\r\n\t\t\t\t\t //padding:'10px 24px',\r\n\t\t\t\t\t borderRadius:'10px',\r\n\t\t\t\t\t backgroundColor: 'rgba(0,0,0,0)',\r\n\t\t\t\t\t textAlign: 'center',\r\n\t\t\t\t\t textDecoration: 'none',\r\n\t\t\t\t\t fontSize: '16px',\r\n\t\t\t\t\t border: '2px solid #F44336',\r\n\t\t\t\t\t color: 'black',\r\n\t\t\t\t\t padding: '15px 32px',\r\n\t\t\t\t\t display: 'inline-block',\r\n\t\t\t\t\t opacity:this.buttonVisibility\r\n\t\t\t\t\t}\r\n\t\t\t\t}>Background NOT Pastel</button>\r\n\t\t\t</div>)\r\n\t\t//return (<svg ref=\"svg\" viewBox=\"0 0 100 100\" height='100%' width='100%'/>);\r\n\t}\r\n}\r\n\r\nexport default QuestionArea;\r\n","// Chromapper Actions\r\n\r\nfunction postData(data, callbackfn) {\r\n\tconst url = '/data'\r\n\t// Default options are marked with *\r\n\tlet input = {\r\n\t\tmethod: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n\t\tcache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n\t\theaders: {\r\n\t\t\t\"Content-Type\": \"application/json\",\r\n\t\t},\r\n\t\tbody:JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n\t};\r\n\tconsole.log(data, callbackfn)\r\n\treturn\tfetch(url, input)\r\n\t\t\t.then(response => response.json()) // parses response to JSON\r\n\t\t\t.then(newQuestion => callbackfn(newQuestion));\r\n}\r\n\r\n\r\n\r\nfunction getData(callbackfn) {\r\n\tconst url = '/data';\r\n\t//if(callbackfn === undefined){ callbackfn=()=>(); }\r\n\t// Default options are marked with *\r\n\treturn fetch(url, {\r\n\t\tmethod: \"GET\", // *GET, POST, PUT, DELETE, etc.\r\n\t\tcache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n\t\theaders: {\"Content-Type\": \"application/json\",}\r\n\t\t//body: \"\"//JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n\t})\r\n\t.then(response => response.json()) // parses response to JSON\r\n\t.then(data => callbackfn(data) );\r\n}\r\n\r\nexport {postData, getData};","import React, {Component} from \"react\";\r\n//import * as d3 from 'd3'; \r\nimport * as THREE from 'three';\r\nimport './ColorCube.css';\r\n//import RendererStats from 'three-webgl-stats';\r\n\r\n\r\nconst OrbitControls = require('three-orbitcontrols');\r\n\r\n\r\n\r\nclass SolutionSpacePointCloud extends Component {\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tconst width = this.mount.clientWidth\r\n\t\tconst height = this.mount.clientHeight\r\n\t\t//ADD SCENE\r\n\t\tthis.scene = new THREE.Scene();\r\n\t\t//ADD CAMERA\r\n\t\tthis.camera = new THREE.PerspectiveCamera(\r\n\t\t\t75*255,\r\n\t\t\twidth / height,\r\n\t\t\t0.1*255,\r\n\t\t\t1000*255\r\n\t\t);\r\n\t\tthis.camera.position.z = 4*255\r\n\r\n\r\n\t\tthis.controls = new OrbitControls( this.camera );\r\n\r\n\t\tthis.controls.enablePan = false;\r\n\t\tthis.controls.maxZoom = 1.5;\r\n\t\tthis.controls.minZoom = 0.4;\r\n\r\n\t\t//ADD RENDERER\r\n\t\tthis.renderer = new THREE.WebGLRenderer({ antialias: true , alpha: true })\r\n\t\tthis.renderer.setClearColor(0x000000, 0)\r\n\t\tthis.renderer.setSize(width, height)\r\n\t\tthis.mount.appendChild(this.renderer.domElement)\r\n\r\n\r\n\r\n\t\tvar cubeSize = 256;\r\n\r\n\t\t//const cubeGeometry = new THREE.EdgesGeometry( new THREE.CubeGeometry(cubeSize, cubeSize, cubeSize) ); \r\n\t\t// geometry\r\n\t\tvar geometry = new THREE.BoxGeometry( cubeSize, cubeSize, cubeSize );\r\n\r\n\t\t// material\r\n\t\tvar material = new THREE.MeshPhongMaterial( {} );\r\n\r\n\t\tvar mesh = new THREE.Mesh( geometry, material );\r\n\t\tvar geo = new THREE.EdgesGeometry( mesh.geometry ); // or WireframeGeometry\r\n\t\tconsole.log(geo);\r\n\t\tgeo.addAttribute( 'color', new THREE.Float32BufferAttribute([1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0], 3))\r\n\t\tvar mat = new THREE.LineBasicMaterial( { vertexColors:THREE.VertexColors, linewidth: 2 } );\r\n\t\tvar wireframe = new THREE.LineSegments( geo, mat );\r\n\t\tthis.cube = wireframe\r\n\r\n\r\n\t\tthis.points = [{x:0, y:0, z:0, ratings:3, rating:[0,0,0]}]\r\n\t\tthis.MAX_POINTS = 8;\r\n\r\n\t\tthis.alphas = new Float32Array( this.MAX_POINTS * 1 ); // 1 alpha value per vertex\r\n\t\tthis.colors = new Float32Array( this.MAX_POINTS * 3 ); //an array of colors for our points. 3 values per color\r\n\t\tthis.positions = new Float32Array( this.MAX_POINTS * 3 ); //an array of coordinates for rendering. 3 values per position\r\n\r\n\t\tvar color = new THREE.Color()\r\n\t\tthis.count = 0;\r\n\r\n\t\tgeometry = new THREE.BufferGeometry();\r\n\r\n\t\tthis.points.forEach(point=>{\r\n\t\t\tconst [rgb, conf] = [[point.x, point.y, point.z], point.rating.reduce((n,c)=>n+c,0)/point.ratings];\r\n\t\t\tconst xyz = [rgb[0] - 128, rgb[1] - 128, rgb[2] - 128];//xyz is memof[-128,128], while rgb is memof[0,256]. So we translate by -128\r\n\r\n\t\t\tthis.alphas[this.count] = conf;//assign our alpha for this point\r\n\r\n\t\t\tthis.positions[this.count*3 + 0] = xyz[0];// add this points positions\r\n\t\t\tthis.positions[this.count*3 + 1] = xyz[1];// add this points positions\r\n\t\t\tthis.positions[this.count*3 + 2] = xyz[2];// add this points positions\r\n\r\n\t\t\tcolor.setRGB(rgb[0]/256, rgb[1]/256, rgb[1]/256);//scale rgb by 1/256, as openGL color values are memof[0,1]\r\n\t\t\tthis.colors[this.count*3 + 0] = color.r;\r\n\t\t\tthis.colors[this.count*3 + 1] = color.g;\r\n\t\t\tthis.colors[this.count*3 + 2] = color.b;\r\n\t\t\tthis.count++;\r\n\t\t})\r\n \r\n\r\n\t\tgeometry.addAttribute( 'alpha', new THREE.Float32BufferAttribute( this.alphas, 1 ) );\r\n\t\tgeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( this.positions, 3 ) );\r\n\t\tgeometry.addAttribute( 'color', new THREE.Float32BufferAttribute( this.colors, 3 ) );\r\n\t\r\n\t//var material = new THREE.PointsMaterial( { size: 15, vertexColors: THREE.VertexColors } );\r\n\t\r\n\t// point cloud material\r\n\tthis.shaderMaterial = new THREE.ShaderMaterial( {\r\n\t\tvertexShader:`\r\n\t\t\tattribute float alpha;\r\n\t\t\tattribute vec3 color;\r\n\t\t\tvarying vec4 rgba;\r\n\t\t\tvoid main() {\r\n\t\t\t\t//vAlpha = alpha;\r\n\t\t\t\trgba = vec4(color, alpha);\r\n\t\t\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\t\t\t\tgl_PointSize = 8.0;\r\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\r\n\t\t\t}`,\r\n\t\tfragmentShader:`\r\n\t\t\t//varying vec3 color;\r\n\t\t\t//varying float vAlpha;\r\n\t\t\tvarying vec4 rgba;\r\n\t\t\tvoid main() {\r\n\t\t\t\tgl_FragColor = vec4( rgba );\r\n\t\t\t}`,\r\n\t\ttransparent:true\r\n\r\n\t});\r\n\r\n\t// point cloud\r\n\tthis.cloud = new THREE.Points( geometry, this.shaderMaterial );\r\n\tthis.cloud.name = \"pointcloud\";\r\n\tthis.group = new THREE.Group();\r\n\tthis.group.add( this.cube )\r\n\tthis.group.add( this.cloud )\r\n\tthis.scene.add( this.group );\r\n\r\n\tthis.start()\r\n\t}\r\n\r\n\tcomponentWillUnmount(){\r\n\t\tthis.stop()\r\n\t\tthis.mount.removeChild(this.renderer.domElement)\r\n\t}\r\n\r\n\tstart = () => {\r\n\t\tif (!this.frameId) {\r\n\t\t\tthis.frameId = requestAnimationFrame(this.animate)\r\n\t\t}\r\n\t}\r\n\r\n/*******************************************************\r\n\r\nvar renderer, scene, camera, cloud, uniforms;\r\n\r\ninit();\r\nanimate();\r\n\r\nfunction init() {\r\n\r\n\t// renderer\r\n\trenderer = new THREE.WebGLRenderer();\r\n\trenderer.setSize( window.innerWidth, window.innerHeight );\r\n\tdocument.body.appendChild( renderer.domElement );\r\n\t\r\n\t// scene\r\n\tscene = new THREE.Scene();\r\n\r\n\t//camera\r\n\tcamera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 1000 );\r\n\tcamera.position.z = 400;\r\n\r\n\t// point cloud geometry\r\n\tvar geometry = new THREE.SphereBufferGeometry( 100, 16, 8 );\r\n\r\n\t// add an attribute\r\n\tnumVertices = geometry.attributes.position.count;\r\n\tvar this.alphas = new Float32Array( numVertices * 1 ); // 1 values per vertex\r\n\r\n\tfor( var i = 0; i < numVertices; i ++ ) {\r\n\t\r\n\t\t// set alpha randomly\r\n\t\tthis.alphas[ i ] = Math.random();\r\n\r\n\t}\r\n \r\n\tgeometry.addAttribute( 'alpha', new THREE.BufferAttribute( this.alphas, 1 ) );\r\n\r\n\t// uniforms\r\n\tuniforms = {\r\n\r\n\t\tcolor: { value: new THREE.Color( Math.random()*0xffffff ) },\r\n\r\n\t};\r\n\r\n\t// point cloud material\r\n\tvar shaderMaterial = new THREE.ShaderMaterial( {\r\n\r\n\t\tuniforms:\t   uniforms,\r\n\t\tvertexShader:   `attribute float alpha;\r\n\r\n\tvarying float vAlpha;\r\n\r\n\tvoid main() {\r\n\r\n\t\tvAlpha = alpha;\r\n\r\n\t\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\r\n\r\n\t\tgl_PointSize = 8.0;\r\n\r\n\t\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\t}\r\n`,\r\n\t\tfragmentShader: `uniform vec3 color;\r\n\r\n\tvarying float vAlpha;\r\n\r\n\tvoid main() {\r\n\r\n\t\tgl_FragColor = vec4( color, vAlpha );\r\n\r\n\t}\r\n`,\r\n\t\ttransparent:\ttrue\r\n\r\n\t});\r\n\r\n\t// point cloud\r\n\tcloud = new THREE.Points( geometry, shaderMaterial );\r\n\r\n\tscene.add( cloud );\r\n\r\n}\r\n\r\nfunction animate() {\r\n\r\n\trequestAnimationFrame( animate );\r\n\r\n\trender();\r\n\r\n}\r\n\r\nfunction render() {\r\n\r\n\tvar this.alphas = cloud.geometry.attributes.alpha;\r\n\tvar colors = cloud.geometry.attributes;\r\n\t//console.log(colors)\r\n\tvar count = this.alphas.count;\r\n\t\r\n\tfor( var i = 0; i < count; i ++ ) {\r\n\t\r\n\t\t// dynamically change this.alphas\r\n\t\tthis.alphas.array[ i ] *= 0.95;\r\n\t\t\r\n\t\tif ( this.alphas.array[ i ] < 0.01 ) { \r\n\t\t\tthis.alphas.array[ i ] = 1.0;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tthis.alphas.needsUpdate = true; // important!\r\n\r\n\t//cloud.rotation.x += 0.005;\r\n\tcloud.rotation.y += 0.005;\r\n\t\r\n\trenderer.render( scene, camera );\r\n\r\n}\r\n*//////////////////////////////////////\r\n\r\n/*\r\n\tsetPoints = () => {\r\n\r\n\t\tvar positions = pointCloud.geometry.attributes.position.array;\r\n\t\tvar colors = pointCloud.geometry.attributes.color.array;\r\n\r\n\t\tvar x, y, z, index;\r\n\r\n\t\tvar l = currentPoints + nbPoints;\r\n\t\tif (l >= MAX_POINTS) {\r\n\t\t\tclearInterval(interval);\r\n\t\t\tconsole.log('Milliseconds to render ' + MAX_POINTS + ' points: ');\r\n\t\t\tconsole.log(Date.now() - startTime);\r\n\t\t\tconsole.log('Expected milliseconds: ' + (INTERVAL_DURATION * MAX_POINTS / nbPoints));\r\n\t\t}\r\n\t\tcurrentPointsIndex = 0\r\n\t\tarr_xyz = data_xyz;\r\n\t\tarr_color = data_color;\r\n\t\tif (currentTimestep == data_xyz.length) {\r\n\t\t\tcurrentTimestep = 0\r\n\t\t}\r\n\r\n\t\tfor (var i = 0; i < arr_xyz.length; i++) {\r\n\t\t\tpoint_xyz = arr_xyz[i];\r\n\t\t\tpoint_color = arr_color[i];\r\n\t\t\tpositions[currentPointsIndex] = point_xyz[0];\r\n\t\t\tcolors[currentPointsIndex++] = point_color[0];\r\n\t\t\tpositions[currentPointsIndex] = point_xyz[1];\r\n\t\t\tcolors[currentPointsIndex++] = point_color[1];\r\n\t\t\tpositions[currentPointsIndex] = point_xyz[2];\r\n\t\t\tcolors[currentPointsIndex++] = point_color[2];\r\n\t\t}\r\n\r\n\t\tcurrentPoints = currentPointsIndex;\r\n\t\tpointCloud.geometry.attributes.position.needsUpdate = true;\r\n\t\tpointCloud.geometry.attributes.color.needsUpdate = true;\r\n\t\tpointCloud.geometry.setDrawRange(0, currentPoints);\r\n\t\tupdate();\r\n\r\n\t}\r\n*/\r\n\r\n\tcreateNewGeometry(){\r\n\t\tthis.alphas = new Float32Array( this.MAX_POINTS * 1 ); // 1 alpha value per vertex\r\n\t\tthis.colors = new Float32Array( this.MAX_POINTS * 3 ); //an array of colors for our points. 3 values per color\r\n\t\tthis.positions = new Float32Array( this.MAX_POINTS * 3 ); //an array of coordinates for rendering. 3 values per position\r\n\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\t\tgeometry.addAttribute( 'alpha', new THREE.Float32BufferAttribute( this.alphas, 1 ) );\r\n\t\tgeometry.addAttribute( 'position', new THREE.Float32BufferAttribute( this.positions, 3 ) );\r\n\t\tgeometry.addAttribute( 'color', new THREE.Float32BufferAttribute( this.colors, 3 ) );\r\n\r\n\t\tthis.scene.remove(this.scene.getObjectByName(this.cloud.name))\r\n\r\n\t\tthis.cloud = new THREE.Points( geometry, this.shaderMaterial );\r\n\t\tthis.cloud.name = \"pointcloud\";\r\n\r\n\t\tthis.group.add(this.cloud);\r\n\t}\r\n\r\n\tupdatePoints = (points) => {\r\n\t\tif(points === undefined){return;}\r\n\t\tthis.points = points;\r\n\t\tvar needsNewGeometry = false;\r\n\t\twhile(this.MAX_POINTS < this.points.length){\r\n\t\t\tthis.MAX_POINTS *= 2; //keep doubling the size of our new buffers until we can take on all of our points again\r\n\t\t\tneedsNewGeometry = true;\r\n\t\t} if (needsNewGeometry){\r\n\t\t\tthis.createNewGeometry();\r\n\t\t}\r\n\t\t//if(this.points === undefined){return;}\r\n\t\tconsole.log(this.cloud)\r\n\r\n\t\tthis.count = 0;\r\n\t\t\r\n\t\tthis.points.forEach(point=>{\r\n\t\t\tconst [rgb, conf] = [[point.x, point.y, point.z], point.rating.reduce((n,c)=>n+c,0)/point.ratings];\r\n\t\t\tconst xyz = [rgb[0] - 128, rgb[1] - 128, rgb[2] - 128];//xyz is memof[-128,128], while rgb is memof[0,256]. So we translate by -128\r\n\t\t\tconsole.log(this.cloud);\r\n\t\t\tthis.cloud.geometry.attributes.alpha.array[this.count] = conf;//assign our alpha for this point\r\n\r\n\t\t\tthis.cloud.geometry.attributes.position.array[this.count*3 + 0] = xyz[0];// add this points positions\r\n\t\t\tthis.cloud.geometry.attributes.position.array[this.count*3 + 1] = xyz[1];// add this points positions\r\n\t\t\tthis.cloud.geometry.attributes.position.array[this.count*3 + 2] = xyz[2];// add this points positions\r\n\r\n\t\t\t//color.setRGB(rgb[0]/256, rgb[1]/256, rgb[1]/256);//scale rgb by 1/256, as openGL color values are memof[0,1]\r\n\t\t\tthis.cloud.geometry.attributes.color.array[this.count*3 + 0] = rgb[0]/256;\r\n\t\t\tthis.cloud.geometry.attributes.color.array[this.count*3 + 1] = rgb[1]/256;\r\n\t\t\tthis.cloud.geometry.attributes.color.array[this.count*3 + 2] = rgb[2]/256;\r\n\t\t\tthis.count++;\r\n\t\t})\r\n\r\n\t\tthis.cloud.geometry.setDrawRange(0, this.count);\r\n\t\tthis.cloud.geometry.attributes.alpha.needsUpdate = true;\r\n\t\tthis.cloud.geometry.attributes.position.needsUpdate = true;\r\n\t\tthis.cloud.geometry.attributes.color.needsUpdate = true;\r\n\t \t\r\n\t}\r\n\r\n\t\r\n\tstop = () => {\r\n\t\tcancelAnimationFrame(this.frameId)\r\n\t}\r\n\t\r\n\tanimate = () => {\r\n\t\t//*\r\n\t\tthis.group.rotation.x += 0.001\r\n\t\tthis.group.rotation.y += 0.001\r\n\t\tthis.group.rotation.z += 0.001\r\n\t\t/**/\r\n\t\tthis.renderScene()\r\n\t\tthis.frameId = window.requestAnimationFrame(this.animate)\r\n\t}\r\n\t\r\n\trenderScene = () => {\r\n\t\tthis.renderer.render(this.scene, this.camera)\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div\r\n\t\t\t\tstyle={{ width: '500px', height: '500px' }}\r\n\t\t\t\tref={(mount) => { this.mount = mount }}\r\n\t\t\t/>\r\n\t\t)\r\n\t}\r\n\r\n}\r\n\r\nexport default SolutionSpacePointCloud;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport ColorCube from './ColorCubeTHREE.js';\nimport * as d3 from \"d3\";\n//import ColorSample from './ColorSample.js';\nimport QuestionArea from './QuestionArea.js'\n\nimport {postData, getData} from './ChromapperActions.js'\nimport SolutionSpacePointCloud from './SolutionSpacePointCloud.js';\n/*console.log(Point, Octree)\n*/\n\nclass App extends Component {\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.ColorCube =\tReact.createRef();\n\t\t//this.ColorSample = React.createRef();\n\t\tthis.QuestionArea =\tReact.createRef();\n\t\tthis.SolutionSpace = React.createRef();\n\t\tthis.state = {viewMode: \"map\",//or \"view\"\n\t\t\t\t\t\t};\n\t}\n\n\tcomponentWillMount(){\n\t\tpostData({}, this.getQuestion);\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.getQuestion();//this.point);\n\t}\n\n\tgetQuestion = (newPoint) => {\n\t\tif(this.point === undefined && newPoint === undefined){return;}\n\t\tconsole.log(this.point)\n\t\tif(newPoint !== undefined){\n\t\t\tthis.point = newPoint;\n\t\t}\n\t\tconsole.log(this.point);\n\t\tthis.update();\n\t}\n\n\tchangeColor = (color) => {\n\t\td3.select(\"body\")\n\t\t\t.transition()\n\t\t\t.style(\"background-color\", color)\n\t}\n\n\tupdate = () => {\n\t\tconst c = this.point.center\n\t\tthis.changeColor(\"rgb(\"+ c.x+\",\"+c.y+\",\"+c.z+\")\");\n\t\tthis.ColorCube.current.update(c.x, c.y, c.z);\n\t}\n\n\ttoggleViewMode(){\n\t\tif(this.state.viewMode === \"map\"){\n\t\t\tthis.setState({viewMode:\"view\"})\n\n\t\t\tthis.changeColor(\"rgb(0,0,0)\")\n\t\t\t\n\t\t} else {\n\t\t\tthis.setState({viewMode:\"map\"})\n\n\t\t\tconst c = this.point.center\n\t\t\tthis.changeColor(\"rgb(\"+c.x+\",\"+c.y+\",\"+c.z+\")\");\n\t\t}\n\t}\n\n\tsubmitResult = (result) => {\n\t\tconsole.log(this);\n\t\tconsole.log(result);\n\n\t\t//postData POSTs the result to the server\n\t\t//- the server then responds with a new question,\n\t\t//- which is then passed as the argument to this.getQuestion\n\t\tconst c = this.point.center\n\t\tpostData({x:c.x, y:c.y, z:c.z, result:result}, this.getQuestion);\n\n\t\tconsole.log(this.SolutionSpace);\n\t\t/* TODO : submit result */\n\t\t//this.QuestionArea.update(this.point);\n\t\t/**/\n\t}\n\n\n\tcomponentDidUpdate(){\n\t\tif(this.SolutionSpace.current !== null){ // check if we are in a state where we CAN ask the server for new points to render\n\t\t\tgetData((newPoints)=>{//ask for new points to render\n\t\t\t\t\tif(this.SolutionSpace.current !== null){ //since this is an async call, let's make sure that we're STILL in a state where we can render the new points before rendering them\n\t\t\t\t\t\tthis.SolutionSpace.current.updatePoints(newPoints);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t)\n\t\t}\n\t}\n\n\t/*\tTODO :: implement this model for viewing the color space:\thttps://jsfiddle.net/oxwmhs4z/1/\t*/\n\n\trender() {\n\t\t//console.log(this.ColorSample);\n\t\t//this.update();\n\t\tconsole.log(this.state);\n\t\tlet viewMode = this.state.viewMode;\n\t\t\n\t\tconsole.log(this)\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t{viewMode === \"map\" ?\t<ColorCube ref={this.ColorCube}/> : null}\n\t\t\t\t{viewMode === \"view\"?\t<SolutionSpacePointCloud ref={this.SolutionSpace}/> : null}\n\t\t\t\t<QuestionArea ref={this.QuestionArea} toggleMode={this.toggleViewMode.bind(this)} submitAnswer={this.submitResult.bind(this)}/>\n\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}